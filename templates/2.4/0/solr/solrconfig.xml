<?xml version="1.0" encoding="UTF-8" ?>
<!--
	GSP service-template version: $Id: solrconfig.xml 7220 2013-03-14 06:49:14Z kamioshotaro01 $
  -->
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!-- 
     For more details about configurations options that may appear in this 
     file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

  <!-- Controls what version of Lucene various components of Solr
       adhere to.  Generally, you want to use the latest version to
       get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can
       affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>LUCENE_40</luceneMatchVersion>

  <!-- lib directives can be used to instruct Solr to load an Jars identified
       and use them to resolve any "plugins" specified in your solrconfig.xml or
       schema.xml (ie: Analyzers, Request Handlers, etc...).

       All directories and paths are resolved relative to the instanceDir.

       If a "./lib" directory exists in your instanceDir, all files found in it
       are included as if you had used the following syntax...
       
              <lib dir="./lib" />
    -->

  <!-- A 'dir' option by itself adds any files found in the directory 
       to the classpath, this is useful for including all jars in a
       directory.
    -->
  <lib dir="../../contrib/extraction/lib" />

  <!-- When a 'regex' is specified in addition to a 'dir', only the
       files in that directory which completely match the regex
       (anchored on both ends) will be included.
    -->
  <lib dir="../../dist/" regex="apache-solr-cell-\d.*\.jar" />
  <lib dir="../../dist/" regex="apache-solr-clustering-\d.*\.jar" />

  <lib dir="../../contrib/clustering/lib/" />

  <!-- If a 'dir' option (with or without a regex) is used and nothing
       is found that matches, it will be ignored
    -->
  <lib dir="/total/crap/dir/ignored" /> 

  <!-- an exact 'path' can be used instead of a 'dir' to specify a 
       specific file.  This will cause a serious error to be logged if 
       it can't be loaded.
    -->
  <!--
     <lib path="../a-jar-that-does-not-exist.jar" /> 
  -->
  
  <!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
  <dataDir>${solr.data.dir:}</dataDir>


  <!-- The DirectoryFactory to use for indexes.
       
       solr.StandardDirectoryFactory, the default, is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  One can force a particular implementation
       via solr.MMapDirectoryFactory, solr.NIOFSDirectoryFactory, or
       solr.SimpleFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based, not
       persistent, and doesn't work with replication.
    -->
  <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.StandardDirectoryFactory}"/>

  <!-- Extends the schema codec factory by adding the appending codec in the list of default codecs. -->
  <codecProviderFactory class="com.rakuten.gsp.solr.codecs.ExtendedCodecProviderFactory" />

  <!-- WARNING: this <indexDefaults> section only provides defaults for index writers
       in general. See also the <mainIndex> section after that when changing parameters
       for Solr's main Lucene index.
    -->
  <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden.
      -->
    <useCompoundFile>false</useCompoundFile>

    <mergeFactor>10</mergeFactor>
    <!-- If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush
         based on whichever limit is hit first.  -->
    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->
    <!-- Sets the amount of RAM that may be used by Lucene indexing
         for buffering added documents and deletions before they are
         flushed to the Directory.  -->
    <ramBufferSizeMB>32</ramBufferSizeMB>

    <!-- <maxMergeDocs>2147483647</maxMergeDocs> -->
    <maxFieldLength>10000</maxFieldLength>
    <writeLockTimeout>1000</writeLockTimeout>
    <commitLockTimeout>10000</commitLockTimeout>

    <!-- Expert: Merge Policy 
         The Merge Policy in Lucene controls how merging of segments is done.
         The default since Solr/Lucene 3.3 is TieredMergePolicy.
         The default since Lucene 2.3 was the LogByteSizeMergePolicy,
         Even older versions of Lucene used LogDocMergePolicy.
      -->
    <!--
       <mergePolicy class="org.apache.lucene.index.LogByteSizeMergePolicy"/>
       -->

    <!--
        NGS:
        BalancedSegmentMergePolicy is more suitable for near real-time search use.
        Parameters seems not to be customizable via solr configuration at this moment.
      -->
    <mergePolicy class="org.apache.lucene.index.BalancedSegmentMergePolicy"/>
    

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
         The SerialMergeScheduler (Lucene 2.2 default) does not.
     -->
    <!--
       <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
       -->

	  
    <!-- LockFactory 

         This option specifies which Lucene LockFactory implementation
         to use.
      
         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         http://wiki.apache.org/lucene-java/AvailableLockFactories
    -->
    <lockType>native</lockType>

    <!-- Expert: Controls how often Lucene loads terms into memory
         Default is 128 and is likely good for most everyone.
      -->
    <!--
       <termIndexInterval>256</termIndexInterval>
       -->
  </indexDefaults>

  <mainIndex>
    <!-- options specific to the main on-disk lucene index -->
    <useCompoundFile>false</useCompoundFile>
    <ramBufferSizeMB>32</ramBufferSizeMB>
    <mergeFactor>10</mergeFactor>
    <!-- Deprecated -->
    <!--<maxBufferedDocs>1000</maxBufferedDocs>-->
    <!--<maxMergeDocs>2147483647</maxMergeDocs>-->

    <!-- inherit from indexDefaults <maxFieldLength>10000</maxFieldLength> -->

    <!-- If true, unlock any held write or commit locks on startup. 
         This defeats the locking mechanism that allows multiple
         processes to safely access a lucene index, and should be
         used with care.
         This is not needed if lock type is 'none' or 'single'
      -->
    <unlockOnStartup>false</unlockOnStartup>
    
    <!-- If true, IndexReaders will be reopened (often more efficient)
         instead of closed and then opened. Default: true
      -->
    <reopenReaders>true</reopenReaders>

    <!-- Expert: Controls how often Lucene loads terms into memory
         Default is 128 and is likely good for most everyone.
      -->
    <!--<termIndexInterval>256</termIndexInterval>-->

    <!-- Commit Deletion Policy

         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.

         http://lucene.apache.org/java/3_5_0/api/core/org/apache/lucene/index/IndexDeletionPolicy.html

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.
         
         The latest commit point should always be preserved regardless
         of the criteria.
    -->
    <deletionPolicy class="solr.SolrDeletionPolicy">
      <!-- The number of commit points to be kept -->
      <str name="maxCommitsToKeep">1</str>
      <!-- The number of optimized commit points to be kept -->
      <str name="maxOptimizedCommitsToKeep">0</str>
      <!--
         Delete all commit points once they have reached the given age.
         Supports DateMathParser syntax e.g.
          
         <str name="maxCommitAge">30MINUTES</str>
         <str name="maxCommitAge">1DAY</str>
      -->
    </deletionPolicy>

    <!-- Lucene Infostream
       
         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
    <infoStream file="INFOSTREAM.txt">false</infoStream> 

  </mainIndex>

  <!--	Enables JMX if and only if an existing MBeanServer is found, use this
    if you want to configure JMX through JVM parameters. Remove this to disable
    exposing Solr configuration and statistics to JMX.

		If you want to connect to a particular server, specify the agentId
		e.g. <jmx agentId="myAgent" />

		If you want to start a new MBeanServer, specify the serviceUrl
		e.g <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>

		For more details see http://wiki.apache.org/solr/SolrJmx
  -->
  <jmx />


  <!-- The GSP specific update handler -->
  <updateHandler class="com.rakuten.gsp.solr.update.IndexTransactionLogUpdateHandler">
    <!-- Update log is disabled -->
    <updateLog enable="false" />
    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents. 

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automaticly
                   triggering a new commit. 
         openSearcher - if false, the commit causes recent index changes
         to be flushed to stable storage, but does not cause a new
         searcher to be opened to make those changes visible.
      -->
    <!--
    <autoCommit> 
      <maxDocs>10000</maxDocs>
      <maxTime>1000</maxTime> 
    </autoCommit>
    -->

    <autoCommit>
      <maxTime>${solr.autocommit.maxtime:300000}</maxTime>
    </autoCommit>

    <!-- The RunExecutableListener executes an external command from a
         hook such as postCommit or postOptimize.
         
         exe - the name of the executable to run
         dir - dir to use as the current working directory. (default=".")
         wait - the calling thread waits until the executable returns. 
                (default="true")
         args - the arguments to pass to the program.  (default is none)
         env - environment variables to set.  (default is none)
      -->
    <!-- This example shows how RunExecutableListener could be used
         with the script based replication...
         http://wiki.apache.org/solr/CollectionDistribution
      -->
    <!--
       <listener event="postCommit" class="solr.RunExecutableListener">
         <str name="exe">solr/bin/snapshooter</str>
         <str name="dir">.</str>
         <bool name="wait">true</bool>
         <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
         <arr name="env"> <str>MYVAR=val1</str> </arr>
       </listener>
      -->

    <!-- A postOptimize event is fired only after every optimize command
      -->
    <!--
       <listener event="postOptimize" class="solr.RunExecutableListener">
         <str name="exe">snapshooter</str>
         <str name="dir">solr/bin</str>
         <bool name="wait">true</bool>
       </listener>
       -->

    <listener event="newSearcher" class="com.rakuten.gsp.solr.IndexWarmupQuerySender">
           <str name="queryLogDir">${jetty.logs}</str>
           <!-- or from jetty.logs -->
           <str name="queryLogTodayPattern">solr\.log$</str>
           <str name="queryLogRotatePattern">solr\.log\.\d\d\d\d\-\d\d\-\d\d$</str>
           <str name="maxQueries">${solr.newsearcher.indexwarmup.maxqueries:30}</str>
           <str name="numThreads">${solr.newsearcher.indexwarmup.numthreads:10}</str>
           <str name="progressInterval">${solr.newsearcher.indexwarmup.progressInterval:100}</str>
           <str name="enable">${solr.newsearcher.indexwarmup.enable:true}</str>
    </listener>
 
    <listener event="firstSearcher" class="com.rakuten.gsp.solr.IndexWarmupQuerySender">
           <str name="queryLogDir">${jetty.logs}</str>
           <!-- or from jetty.logs -->
           <str name="queryLogTodayPattern">solr\.log$</str>
           <str name="queryLogRotatePattern">solr\.log\.\d\d\d\d\-\d\d\-\d\d$</str>
           <str name="maxQueries">${solr.firstsearcher.indexwarmup.maxqueries:100}</str>
           <str name="numThreads">${solr.firstsearcher.indexwarmup.numthreads:10}</str>
           <str name="progressInterval">${solr.firstsearcher.indexwarmup.progressInterval:100}</str>
           <str name="enable">${solr.firstsearcher.indexwarmup.enable:true}</str>
    </listener>

  </updateHandler>
  
  <!-- IndexReaderFactory

       Use the following format to specify a custom IndexReaderFactory,
       which allows for alternate IndexReader implementations.

       ** Experimental Feature **

       Please note - Using a custom IndexReaderFactory may prevent
       certain other features from working. The API to
       IndexReaderFactory may change without warning or may even be
       removed from future releases if the problems cannot be
       resolved.


       ** Features that may not work with custom IndexReaderFactory **

       The ReplicationHandler assumes a disk-resident index. Using a
       custom IndexReader implementation may cause incompatibility
       with ReplicationHandler and may cause replication to not work
       correctly. See SOLR-1366 for details.

    -->
  <!--
     <indexReaderFactory name="IndexReaderFactory"
                         class="org.apache.solr.core.StandardIndexReaderFactory">
       <int name="setTermIndexDivisor">12</int>
     </indexReaderFactory >
     -->


  <query>
    <!-- Max Boolean Clauses

         Maximum number of clauses in each BooleanQuery,  an exception
         is thrown if exceeded.

         ** WARNING **
         
         This option actually modifies a global Lucene property that
         will affect all SolrCores.  If multiple solrconfig.xml files
         disagree on this property, the value at any given moment will
         be based on the last SolrCore to be initialized.
         
      -->
    <maxBooleanClauses>1024</maxBooleanClauses>


    <!-- Solr Internal Query Caches

         There are two implementations of cache available for Solr,
         LRUCache, based on a synchronized LinkedHashMap, and
         FastLRUCache, based on a ConcurrentHashMap.  

         FastLRUCache has faster gets and slower puts in single
         threaded operation and thus is generally faster than LRUCache
         when the hit ratio of the cache is high (> 75%), and may be
         faster under other scenarios on multi-cpu systems.
    -->

    <!-- Filter Cache

         Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.  When a
         new searcher is opened, its caches may be prepopulated or
         "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate.  For
         LRUCache, the autowarmed items will be the most recently
         accessed items.

         Parameters:
           class - the SolrCache implementation LRUCache or
               (LRUCache or FastLRUCache)
           size - the maximum number of entries in the cache
           initialSize - the initial capacity (number of entries) of
               the cache.  (see java.util.HashMap)
           autowarmCount - the number of entries to prepopulate from
               and old cache.  
      -->
    <filterCache
       class         = "solr.FastLRUCache"
       size          = "${solr.cache.filtercache.size:512}"
       initialSize   = "${solr.cache.filtercache.initialsize:512}"
       autowarmCount = "${solr.cache.filtercache.autowarmcount:0}"
       />

    <!-- Query Result Cache
         
         Caches results of searches - ordered lists of document ids
         (DocList) based on a query, a sort, and the range of documents requested.  
      -->
    <queryResultCache
       class         = "solr.LRUCache"
       size          = "${solr.cache.queryresultcache.size:512}"
       initialSize   = "${solr.cache.queryresultcache.initialsize:512}"
       autowarmCount = "${solr.cache.queryresultcache.autowarmcount:0}"
       />

    <!-- Field Value Cache
         
         Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      -->
    <fieldValueCache
       class         = "solr.FastLRUCache"
       size          = "${solr.cache.fieldvaluecache.size:512}"
       autowarmCount = "${solr.cache.fieldvaluecache.autowarmcount:128}"
       showItems     = "10"
       />

    <!-- Document Cache

         Caches Lucene Document objects (the stored fields for each
         document).  Since Lucene internal document ids are transient,
         this cache will not be autowarmed.  
      -->
    <documentCache
       class         = "solr.LRUCache"
       size          = "${solr.cache.documentcache.size:512}"
       initialSize   = "${solr.cache.documentcache.initialsize:512}"
       autowarmCount = "${solr.cache.documentcache.autowarmcount:0}"
       />

    <!-- Lazy Field Loading

         If true, stored fields that are not requested will be loaded
         lazily.  This can result in a significant speed improvement
         if the usual case is to not load all stored fields,
         especially if the skipped fields are large compressed text
         fields.
      -->
    <enableLazyFieldLoading>${solr.cache.enablelazyfieldloading:true}</enableLazyFieldLoading>

   <!-- Use Filter For Sorted Query

        A possible optimization that attempts to use a filter to
        satisfy a search.  If the requested sort does not include
        score, then the filterCache will be checked for a filter
        matching the query. If found, the filter will be used as the
        source of document ids, and then the sort will be applied to
        that.

        For most situations, this will not be useful unless you
        frequently get the same search repeatedly with different sort
        options, and none of them ever use "score"
     -->
   <!--
      <useFilterForSortedQuery>true</useFilterForSortedQuery>
      -->

   <!-- Result Window Size

        An optimization for use with the queryResultCache.  When a search
        is requested, a superset of the requested number of document ids
        are collected.  For example, if a search for a particular query
        requests matching documents 10 through 19, and queryWindowSize is 50,
        then documents 0 through 49 will be collected and cached.  Any further
        requests in that range can be satisfied via the cache.  
     -->
   <queryResultWindowSize>${solr.cache.queryresultwindowsize:20}</queryResultWindowSize>

   <!-- Maximum number of documents to cache for any entry in the
        queryResultCache. 
     -->
   <queryResultMaxDocsCached>${solr.cache.queryresultmaxdocscached:200}</queryResultMaxDocsCached>


   <!-- Query Related Event Listeners

        Various IndexSearcher related events can trigger Listeners to
        take actions.

        newSearcher - fired whenever a new searcher is being prepared
        and there is a current searcher handling requests (aka
        registered).  It can be used to prime certain caches to
        prevent long request times for certain requests.

        firstSearcher - fired whenever a new searcher is being
        prepared but there is no current registered searcher to handle
        requests or to gain autowarming data from.

        
     -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence. 
      -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
           <lst> <str name="q">solr</str> <str name="start">0</str> <str name="rows">10</str> </lst>
           <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
           -->
      </arr>
    </listener>

    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
           <lst><str name="q">static firstSearcher warming query from solrconfig.xml</str></lst>
           -->
      </arr>
    </listener>

    <!-- Use Cold Searcher

         If a search request comes in and there is no current
         registered searcher, then immediately register the still
         warming searcher and use it.  If "false" then all requests
         will block until the first searcher is done warming.
      -->
    <useColdSearcher>${solr.query.usecoldsearcher:false}</useColdSearcher>

    <!-- Max Warming Searchers
         
         Maximum number of searchers that may be warming in the
         background concurrently.  An error is returned if this limit
         is exceeded.

         Recommend values of 1-2 for read-only slaves, higher for
         masters w/o cache warming.
      -->
    <maxWarmingSearchers>${solr.query.maxwarmingsearchers:2}</maxWarmingSearchers>

  </query>


  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

       handleSelect is a legacy option that affects the behavior of requests
       such as /select?qt=XXX

       handleSelect="true" will cause the SolrDispatchFilter to process
       the request and dispatch the query to a handler specified by the
       "qt" param, assuming "/select" isn't already registered.

       handleSelect="false" will cause the SolrDispatchFilter to
       ignore "/select" requests, resulting in a 404 unless a handler
       is explicitly registered with the name "/select"

       handleSelect="true" is not recommended for new users, but is the default
       for backwards compatibility
    -->
  <requestDispatcher handleSelect="true" >

    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         enableRemoteStreaming - enables use of the stream.file
         and stream.url parameters for specifying remote streams.

         multipartUploadLimitInKB - specifies the max size of
         Multipart File Uploads that Solr will allow in a Request.
         
         *** WARNING ***
         The settings below authorize Solr to fetch remote files, You
         should make sure your system has some authentication before
         using enableRemoteStreaming="true"

      --> 
    <requestParsers enableRemoteStreaming="true"
                    multipartUploadLimitInKB="2048000" />

    <!-- HTTP Caching

         Set HTTP caching related parameters (for proxy caches and clients).

         The options below instruct Solr not to output any HTTP Caching
         related headers
      -->

    <!-- If you include a <cacheControl> directive, it will be used to
         generate a Cache-Control header (as well as an Expires header
         if the value contains "max-age=")
         
         By default, no Cache-Control header is generated.
         
         You can use the <cacheControl> option even if you have set
         never304="true"
      -->
    <!-- <httpCaching never304="true"> -->

    <!-- To enable Solr to respond with automatically generated HTTP
         Caching headers, and to response to Cache Validation requests
         correctly, set the value of never304="false"
         
         This will cause Solr to generate Last-Modified and ETag
         headers based on the properties of the Index.

         The following options can also be specified to affect the
         values of these headers...

         lastModFrom - the default value is "openTime" which means the
         Last-Modified value (and validation against If-Modified-Since
         requests) will all be relative to when the current Searcher
         was opened.  You can change it to lastModFrom="dirLastMod" if
         you want the value to exactly correspond to when the physical
         index was last modified.

         etagSeed="..." is an option you can change to force the ETag
         header (and validation against If-None-Match requests) to be
         different even if the index has not changed (ie: when making
         significant changes to your config file)

         (lastModifiedFrom and etagSeed are both ignored if you use
         the never304="true" option)
      -->
    <httpCaching lastModifiedFrom="openTime"
                 etagSeed="Solr">
      <!-- <cacheControl>max-age=30, public</cacheControl> -->
    </httpCaching>
  </requestDispatcher>


  <!-- Request Handlers 

       http://wiki.apache.org/solr/SolrRequestHandler

       Incoming queries will be dispatched to a specific handler by name
       based on the path specified in the request.

       Legacy behavior: If the request path uses "/select" but no Request
       Handler has that name, and if handleSelect="true" has been specified in
       the requestDispatcher, then the Request Handler is dispatched based on
       the qt parameter.  Handlers without a leading '/' are accessed this way
       like so: http://host/app/[core/]select?qt=name  If no qt is
       given, then the requestHandler that declares default="true" will be
       used or the one named "standard".
       
       If a Request Handler is declared with startup="lazy", then it will
       not be initialized until the first request that uses it.

    -->
  <requestHandler name="standard" class="solr.SearchHandler" default="true">
    <!-- include parameters for HttpShardHandlerFactory -->
    <xi:include href="httpshardhandlerfactory.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="echoParams">none</str>

      <!-- Hide relevancy related info from default result set -->
      <str name="fl">*,-score,-_query_boost_terms,-_query_boost_terms_kw,-_query_boost_terms_ws,-_doc_boost</str>

      <!-- Parameters for generalized bigram search -->
      <str name="defType">SingleCharQParser</str>
      <str name="fqDefType">SingleCharQParser</str>
      <!-- End of parameters for generalized bigram search -->
 
    </lst>

    <!-- NGS custom feature: Shard authentication in SearchHandler.
          
         Separate authentication configuration to a different file for security reason.
         The file will be read from local disk even in Zookeeper mode? -->
    <!-- <xi:include href="./etc/auth_solr_shards.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
      <xi:fallback>
        //In a case that no authentication is used in shards.
      </xi:fallback>
    </xi:include> -->
     
  </requestHandler>
  
  <!-- A request handler that returns dynamic range facet.
       Dynamic facet module calls standard SearchHandler internally above.
       So, default parameters in the above also be used.
  -->
  <requestHandler name="dfacet"
                  class="jp.co.rakuten.gsp.solr.dfacet.DynamicFacetingRequestHandler">
    <!-- include parameters for HttpShardHandlerFactory -->
    <xi:include href="httpshardhandlerfactory.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    
    <lst name="defaults">
      <str name="echoParams">none</str>

      <!-- Hide relevancy related info from default result set -->
      <str name="fl">*,-score,-_query_boost_terms,-_query_boost_terms_kw,-_query_boost_terms_ws,-_doc_boost</str>

      <!-- Parameters for generalized bigram search -->
      <str name="defType">SingleCharQParser</str>
      <str name="fqDefType">SingleCharQParser</str>
      <!-- End of parameters for generalized bigram search -->

    </lst>
  </requestHandler>

  <requestHandler name="/synonym"
                  class="jp.co.rakuten.gsp.solr.handler.GSPSynonymRequestHandler">
    <!-- include parameters for HttpShardHandlerFactory -->
    <xi:include href="httpshardhandlerfactory.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    
    <lst name="defaults">
      <str name="qt">standard</str>
      <!-- str name="echoParams">none</str>
      <str name="fl">*,-score,-_query_boost_terms,-_query_boost_terms_kw,-_query_boost_terms_ws,-_doc_boost</str -->
    </lst>
  </requestHandler>


  <!-- Solr Replication

       The SolrReplicationHandler supports replicating indexes from a
       "master" used for indexing and "slaves" used for queries.

       http://wiki.apache.org/solr/SolrReplication 

       In the example below, remove the <lst name="master"> section if
       this is just a slave and remove  the <lst name="slave"> section
       if this is just a master.
    -->
  <requestHandler name="/replication" class="solr.ReplicationHandler" >
    <lst name="master">
      <str name="enable">${enable_master:false}</str>
      <str name="replicateAfter">startup</str>
      <str name="replicateAfter">commit</str>
      <!-- <str name="replicateAfter">optimize</str>-->
    </lst>
    <lst name="slave">
      <str name="enable">${enable_slave:false}</str> 
      <str name="masterUrl">http://${master_host:localhost:8983}/solr/replication</str>
      <str name="pollInterval">${slave_poll_interval:00:00:60}</str>
    </lst>
  </requestHandler>

  <!--  GSP SharedFileSystem request handler
	An Handler which provides a REST API for the downloads of SequencedUpdate through HDFS and Solr's replicas.
  -->
  <requestHandler name="/shared" class="com.rakuten.gsp.solr.handler.SharedFileSystemRequestHandler">
    <!-- If false, seeding from this handler is disabled. -->
    <bool name="seedEnabled">${enable_seed:true}</bool>
    <!-- The max number of megabytes per second this handler can read. -->
    <!-- <int name="maxMbPerSecond">100</int> -->
  </requestHandler>

  <!-- GSP Update Request Handler
       This handler provides a REST API for updates and commits.
  -->
  <requestHandler name="/update" class="com.rakuten.gsp.solr.handler.IndexTransactionLogUpdateRequestHandler">
  </requestHandler>

  <!-- Search Components

       Search components are registered to SolrCore and used by 
       instances of SearchHandler (which can access them by name)
       
       By default, the following components are available:
       
       <searchComponent name="query"     class="solr.QueryComponent" />
       <searchComponent name="facet"     class="solr.FacetComponent" />
       <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
       <searchComponent name="highlight" class="solr.HighlightComponent" />
       <searchComponent name="stats"     class="solr.StatsComponent" />
       <searchComponent name="debug"     class="solr.DebugComponent" />
   
       Default configuration in a requestHandler would look like:

       <arr name="components">
         <str>query</str>
         <str>facet</str>
         <str>mlt</str>
         <str>highlight</str>
         <str>stats</str>
         <str>debug</str>
       </arr>

       If you register a searchComponent to one of the standard names, 
       that will be used instead of the default.

       To insert components before or after the 'standard' components, use:
    
       <arr name="first-components">
         <str>myFirstComponentName</str>
       </arr>
    
       <arr name="last-components">
         <str>myLastComponentName</str>
       </arr>

       NOTE: The component registered with the name "debug" will
       always be executed after the "last-components" 
       
    -->

  <!-- Term Vector Component

       http://wiki.apache.org/solr/TermVectorComponent
    -->
  <searchComponent name="tvComponent"
                   class="org.apache.solr.handler.component.TermVectorComponent"/>
  
  <!-- A request handler for the term vector component
    -->
  <requestHandler name="tvrh" class="org.apache.solr.handler.component.SearchHandler">
    <!-- include parameters for HttpShardHandlerFactory -->
    <xi:include href="httpshardhandlerfactory.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    
    <lst name="defaults">
      <bool name="tv">true</bool>
    </lst>
    <arr name="last-components">
      <str>tvComponent</str>
    </arr>
  </requestHandler>

  <!-- Terms Component

       http://wiki.apache.org/solr/TermsComponent

       A component to return terms and document frequency of those
       terms
    -->
  <searchComponent name="termsComponent"
                   class="org.apache.solr.handler.component.TermsComponent"/>

  <!-- A request handler for demonstrating the terms component -->
  <requestHandler name="/terms"
                  class="org.apache.solr.handler.component.SearchHandler">
    <!-- include parameters for HttpShardHandlerFactory -->
    <xi:include href="httpshardhandlerfactory.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    
    <lst name="defaults">
      <bool name="terms">true</bool>
    </lst>     
    <arr name="components">
      <str>termsComponent</str>
    </arr>
  </requestHandler>


  <!-- Update Request Handler.  
       
       http://wiki.apache.org/solr/UpdateXmlMessages

       The canonical Request Handler for Modifying the Index through
       commands specified using XML, JSON, CSV, or JAVABIN

       Note: Since solr1.1 requestHandlers requires a valid content
       type header if posted in the body. For example, curl now
       requires: -H 'Content-type:text/xml; charset=utf-8'
       
       To override the request content type and force a specific 
       Content-type, use the request parameter: 
         ?update.contentType=text/csv
       
       This handler will pick a response format to match the input
       if the 'wt' parameter is not explicit
  -->
  <requestHandler name="/update_debug" class="solr.XmlUpdateRequestHandler" /> 

  <!-- Update request handler for JAVABIN data -->
  <requestHandler name="/update_debug/javabin" class="solr.BinaryUpdateRequestHandler" /> 

  <!-- CSV update handler, loaded on demand -->
  <requestHandler name="/update_debug/csv"
                  class="solr.CSVRequestHandler"
                  startup="lazy" /> 
  <!-- JSON update handler, loaded on demand -->
  <requestHandler name="/update_debug/json"
                  class="solr.JsonUpdateRequestHandler"
                  startup="lazy" />

  <!-- An analysis handler that provides a breakdown of the analysis
       process of provided documents.
    -->
  <requestHandler name="/analysis/document"
                  class="solr.DocumentAnalysisRequestHandler"
                  startup="lazy"/>

  <!-- Field Analysis Request Handler

       RequestHandler that provides much the same functionality as
       analysis.jsp. Provides the ability to specify multiple field
       types and field names in the same request and outputs
       index-time and query-time analysis for each of them.

       Request parameters are:
       analysis.fieldname - field name whose analyzers are to be used

       analysis.fieldtype - field type whose analyzers are to be used
       analysis.fieldvalue - text for index-time analysis
       q (or analysis.q) - text for query time analysis
       analysis.showmatch (true|false) - When set to true and when
           query analysis is performed, the produced tokens of the
           field value analysis will be marked as "matched" for every
           token that is produces by the query analysis
   -->
  <requestHandler name="/analysis/field"
                  class="solr.FieldAnalysisRequestHandler"
                  startup="lazy"/>

  <!-- Admin Handlers

       Admin Handlers - This will register all the standard admin
       RequestHandlers.  
    -->
  <requestHandler name="/admin/"
                  class="org.apache.solr.handler.admin.AdminHandlers" />

  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="PingRequestHandler">
    <lst name="defaults">
      <str name="qt">standard</str>
      <str name="q">1</str>
      <str name="echoParams">all</str>
    </lst>
  </requestHandler>

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
    <lst name="defaults">
      <!-- for all params (including the default etc) use: 'all' -->
      <str name="echoParams">explicit</str>
      <str name="echoHandler">true</str>
    </lst>
  </requestHandler>
  
  <!-- Highlighting Component
       
       http://wiki.apache.org/solr/HighlightingParameters
    -->
  <searchComponent class="solr.HighlightComponent" name="highlight">
    <highlighting>
      <!-- Configure the standard fragmenter -->
      <!-- This could most likely be commented out in the "default" case -->
      <fragmenter name="gap"
                  class="org.apache.solr.highlight.GapFragmenter"
                  default="true">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>

      <!-- A regular-expression-based fragmenter 
           (for sentence extraction) 
        -->
      <fragmenter name="regex"
                  class="org.apache.solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!-- slightly smaller fragsizes work better because of slop -->
          <int name="hl.fragsize">70</int>
          <!-- allow 50% slop on fragment sizes -->
          <float name="hl.regex.slop">0.5</float>
          <!-- a basic sentence pattern -->
          <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
        </lst>
      </fragmenter>

      <!-- Configure the standard formatter -->
      <formatter name="html"
                 class="org.apache.solr.highlight.HtmlFormatter"
                 default="true">
        <lst name="defaults">
          <str name="hl.simple.pre"><![CDATA[<em>]]></str>
          <str name="hl.simple.post"><![CDATA[</em>]]></str>
        </lst>
      </formatter>

      <!-- Configure the standard encoder -->
      <encoder name="html"
               class="org.apache.solr.highlight.HtmlEncoder"
               default="true"/>

      <!-- Configure the standard fragListBuilder -->
      <fragListBuilder name="simple"
                       class="org.apache.solr.highlight.SimpleFragListBuilder"
                       default="true"/>

      <!-- Configure the single fragListBuilder -->
      <fragListBuilder name="single"
                       class="org.apache.solr.highlight.SingleFragListBuilder"/>

      <!-- default tag FragmentsBuilder -->
      <fragmentsBuilder name="default"
                        class="org.apache.solr.highlight.ScoreOrderFragmentsBuilder"
                        default="true">
        <!-- 
           <lst name="defaults">
             <str name="hl.multiValuedSeparatorChar">/</str>
           </lst>
           -->
      </fragmentsBuilder>

      <!-- multi-colored tag FragmentsBuilder -->
      <fragmentsBuilder name="colored"
                        class="org.apache.solr.highlight.ScoreOrderFragmentsBuilder">
        <lst name="defaults">
          <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
          <str name="hl.tag.post"><![CDATA[</b>]]></str>
        </lst>
      </fragmentsBuilder>
    </highlighting>
  </searchComponent>


  <!-- Update Processors

       Chains of Update Processor Factories for dealing with Update
       Requests can be declared, and then used by name in Update
       Request Processors

       http://wiki.apache.org/solr/UpdateRequestProcessor

    --> 

  <!-- Deduplication

       An example dedup update processor that creates the "id" field
       on the fly based on the hash code of some other fields.  This
       example has overwriteDupes set to false since we are using the
       id field as the signatureField and Solr will maintain
       uniqueness based on that anyway.  
    -->
  <!--
     <updateRequestProcessorChain name="dedupe">
       <processor class="solr.processor.SignatureUpdateProcessorFactory">
         <bool name="enabled">true</bool>
         <str name="signatureField">id</str>
         <bool name="overwriteDupes">false</bool>
         <str name="fields">name,features,cat</str>
         <str name="signatureClass">solr.processor.Lookup3Signature</str>
       </processor>
       <processor class="solr.LogUpdateProcessorFactory" />
       <processor class="solr.RunUpdateProcessorFactory" />
     </updateRequestProcessorChain>
     -->
  
  <!-- Language identification

       This example update chain identifies the language of the incoming
       documents using the langid contrib. The detected language is
       written to field language_s. No field name mapping is done.
       The fields used for detection are text, title, subject and description,
       making this example suitable for detecting languages form full-text
       rich documents injected via ExtractingRequestHandler.
       See more about langId at http://wiki.apache.org/solr/LanguageDetection
    -->
  <!--
     <updateRequestProcessorChain name="langid">
       <processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
         <str name="langid.fl">text,title,subject,description</str>
         <str name="langid.langField">language_s</str>
         <str name="langid.fallback">en</str>
       </processor>
       <processor class="solr.LogUpdateProcessorFactory" />
       <processor class="solr.RunUpdateProcessorFactory" />
     </updateRequestProcessorChain>
     -->
  
  <!-- An example dedup update processor that creates the "id" field on the fly
       based on the hash code of some other fields.  This example has overwriteDupes
       set to false since we are using the id field as the signatureField and Solr
       will maintain uniqueness based on that anyway. 
       
       You have to link the chain to an update handler above to use it ie:
       <requestHandler name="/update "class="solr.XmlUpdateRequestHandler">
         <lst name="defaults">
           <str name="update.processor">dedupe</str>
         </lst>
       </requestHandler>  
       -->


  <!-- Response Writers

       http://wiki.apache.org/solr/QueryResponseWriter

       Request responses will be written using the writer specified by
       the 'wt' request parameter matching the name of a registered
       writer.

       The "default" writer is the default and will be used if 'wt' is
       not specified in the request.
    -->
  <!-- The following response writers are implicitly configured unless
       overridden...
    -->
  <!--
     <queryResponseWriter name="xml" class="solr.XMLResponseWriter" default="true"/>
     <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
     <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
     <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
     <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
     <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
     <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter"/>
     <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>

     Custom response writers can be declared as needed...
    
     <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
     -->

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  
    -->
  <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>
  
  <!-- custom for Purchase History Search -->
  <queryResponseWriter name="custom"
                       class="jp.co.rakuten.gsp.solr.responsewriter.JsonStructResponseWriter"  />


  <!-- Query Parsers

       http://wiki.apache.org/solr/SolrQuerySyntax

       Multiple QParserPlugins can be registered by name, and then
       used in either the "defType" param for the QueryComponent (used
       by SearchHandler) or in LocalParams
    -->
    
  <queryParser name="SearchCoreQParser"
               class="com.rakuten.gsp.solr.parser.SearchCoreQParserPlugin" />
               
  <queryParser name="simpleshard"
               class="jp.co.rakuten.gsp.solr.parser.SimpleShardQParserPlugin" />
               
  <queryParser name="SingleCharQParser"
               class="jp.co.rakuten.gsp.solr.parser.SingleCharQParserPlugin" />

  <!--
	Work around for GSP-344.
	Should investigate this later.
    -->
  <queryParser name="lucene" class="org.apache.solr.search.LuceneQParserPlugin"/>


  <!-- Function Parsers

       http://wiki.apache.org/solr/FunctionQuery

       Multiple ValueSourceParsers can be registered by name, and then
       used as function names when using the "func" QParser.
    -->
  <!-- example of registering a custom function parser  -->
  <!--
     <valueSourceParser name="myfunc" 
                        class="com.mycompany.MyValueSourceParser" />
     -->

  <!-- Legacy config for the admin interface -->
  <admin>
    <defaultQuery>solr</defaultQuery>
  </admin>

</config>
